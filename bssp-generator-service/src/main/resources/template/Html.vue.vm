<template>
    <div class="app-container">
        <div class="filter-container">
            <el-input v-model="listQuery.label" placeholder="请输入搜索信息" style="width: 200px;" class="filter-item"
                      @keyup.enter.native="handleFilter"/>
            <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">
                搜索
            </el-button>
            <el-button class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate">
                添加
            </el-button>
        </div>
        <el-table
                v-loading="listLoading"
                :data="list"
                element-loading-text="Loading"
                border
                fit
                highlight-current-row
                style="width: 100%;"
        >
        #foreach ($column in $columns)
            <el-table-column label="$column.comments">
                <template slot-scope="scope">
                    {{ scope.row.$column.attrname }}
                </template>
            </el-table-column>
        #end
            <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
                <template slot-scope="{row,$index}">
                    <el-button type="primary" size="mini" @click="handleUpdate(row)">
                        编辑
                    </el-button>
                    <el-button v-if="row.status!='deleted'" size="mini" type="danger" @click="handleDelete(row,$index)">
                        删除
                    </el-button>
                </template>
            </el-table-column>
        </el-table>
        <pagination v-show="total>0" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit"
                    @pagination="getList"/>

        <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
            <el-form ref="dataForm" :rules="rules" :model="temp" label-position="left" label-width="70px"
                     style="width: 400px; margin-left:50px;">
                #foreach ($column in $columns)
                    <el-form-item :label="columnLabel.path">
                        <el-input v-model="temp.$column.attrname" type="text"/>
                    </el-form-item>
                #end
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">
                    取消
                </el-button>
                <el-button type="primary" @click="dialogStatus==='create'?createData():updateData()">
                    确认
                </el-button>
            </div>
        </el-dialog>
    </div>
</template>

<script>
    import Pagination from '@/components/Pagination' // secondary package based on el-pagination
    import {create, getPage${className}, update} from "@/api/${classname}";

    export default {
        components: {Pagination},
        filters: {
            statusFilter(status) {
                const statusMap = {
                    1: 'success',
                    2: 'info',
                    0: 'danger'
                }
                return statusMap[status]
            }
        },
        data() {
            return {
                list: null,
                listLoading: true,
                downloadLoading: false,
                total: 0,
                listQuery: {
                    page: 1,
                    limit: 10,
                    importance: undefined,
                    label: undefined,
                    type: undefined,
                    sort: 'id'
                },
                dialogFormVisible: false,
                dialogStatus: '',
                textMap: {
                    update: 'Edit',
                    create: 'Create'
                },
                dialogPvVisible: false,
                temp: {
                    #foreach ($column in $columns)
                        $column.attrname: '',
                    #end
                },
                columnLabel: {
                    #foreach ($column in $columns)
                        $column.attrname: '$column.comments',
                    #end
                },
            }
        },
        created() {
            this.getList()
        },
        methods: {
            getList() {
                this.listLoading = true
                getPage${className}(this.listQuery).then(response => {
                            this.total = response.data.total
                            this.list = response.data.records
                            // Just to simulate the time of the request
                            setTimeout(() => {
                                this.listLoading = false
                            }, 1 * 1000)
                        },
                        error => {
                        })
            },
            handleFilter() {
                this.listQuery.page = 1
                this.getList()
            },
            statusFilter(status) {
                const statusMap = {
                    1: '启用',
                    0: '禁用'
                }
                return statusMap[status]
            },
            resetTemp() {
                this.temp = {
                    label: '',
                    isPublic: 0,
                    path: '',
                    component: '',
                    isEnable: 1,
                    sortValue: undefined,
                    icon: '',
                    parentId: 0,
                    desc: '',
                }
            },
            handleCreate() {
                this.resetTemp(),
                        this.dialogStatus = 'create'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    this.$refs['dataForm'].clearValidate()
                })
            },
            createData() {
                this.$refs['dataForm']
                        .validate((valid)=>{
                    if (valid) {
                        create(this.temp).then(() => {
                            this.list.unshift(this.temp)
                            this.dialogFormVisible = false
                            this.$notify({
                                title: '成功',
                                message: '创建成功',
                                type: 'success',
                                duration: 2000
                            }),
                            this.getList()
                        })
                    }
                })
            },
            handleUpdate(row) {
                this.temp = Object.assign({}, row) // copy obj
                this.dialogStatus = 'update'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    this.$refs['dataForm'].clearValidate()
                })
            },
            updateData() {
                this.$refs['dataForm']
                        .validate((valid) => {
                    if (valid) {
                        const tempData = Object.assign({}, this.temp)
                        update(tempData).then(() => {
                            const index = this.list.findIndex(v => v.id === this.temp.id)
                            this.list.splice(index, 1, this.temp)
                            this.dialogFormVisible = false
                            this.$notify({
                                title: '成功',
                                message: '更新成功',
                                type: 'success',
                                duration: 2000
                            }),
                            this.getList()
                        })
                    }
                    })
            },
            handleDelete(row) {
                const h = this.$createElement;
                this.$msgbox({
                    title: '消息',
                    message: h('p', null, [
                        h('span', null, '确认要删除当前记录吗？ ')
                    ]),
                    showCancelButton: true,
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(action => {
                    const tempData = {'id': row.id, 'isDelete': 1}
                    update(tempData).then(() => {
                        const index = this.list.findIndex(v => v.id === this.temp.id)
                        this.list.splice(index, 1, this.temp)
                        this.dialogFormVisible = false
                        this.$notify({
                            title: '成功',
                            message: '删除成功',
                            type: 'success',
                            duration: 2000
                        }),
                                this.getList()
                    })
                });
            }
        }
    }
</script>
